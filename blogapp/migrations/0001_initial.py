# Generated by Django 3.2.9 on 2021-11-06 07:50

import ckeditor.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(blank=True, max_length=255)),
                ('unique_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_category', models.CharField(choices=[('BIO-GRAPHY', 'BIO-GRAPHY'), ('cricket', 'cricket'), ('technical', 'technical'), ('invensions', 'invensions'), ('others', 'others')], default='BIO-GRAPHY', max_length=25)),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('like', models.IntegerField(default=0)),
                ('main_title', models.TextField(default='BIO-GRAPHY', max_length=3000)),
                ('main_image', models.ImageField(blank=True, upload_to='images/shop')),
                ('title_1', models.CharField(default='BioGraphy', max_length=3000)),
                ('pera_1', ckeditor.fields.RichTextField()),
                ('image_2', models.ImageField(blank=True, upload_to='images')),
                ('title_2', models.CharField(blank=True, max_length=255)),
                ('pera_2', models.TextField(blank=True, max_length=3000)),
                ('image_3', models.ImageField(blank=True, upload_to='images')),
                ('title_3', models.CharField(blank=True, max_length=255)),
                ('pera_3', models.TextField(blank=True, max_length=3000)),
                ('image_4', models.ImageField(blank=True, upload_to='images')),
                ('title_4', models.CharField(blank=True, max_length=255)),
                ('pera_4', models.TextField(blank=True, max_length=3000)),
                ('create_by', models.ForeignKey(default='Anonymos', on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Unique_user',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique', models.UUIDField(default=uuid.uuid4)),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Likes',
            fields=[
                ('like_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('like_time', models.DateTimeField(auto_now_add=True)),
                ('total_like', models.IntegerField(default=0)),
                ('like_for', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.PROTECT, to='blogapp.blog')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_text', models.TextField(max_length=1100)),
                ('comment_created_time', models.DateTimeField(auto_now_add=True)),
                ('comment_created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('comment_for', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blogapp.blog')),
            ],
        ),
    ]
